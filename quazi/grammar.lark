start : (stmt ";" " "?)* stmt?

codeblock : "{" " "? ((stmt ";")* stmt?)? " "? "}"

stmt : expr

METADATA: /[^\*;]+/

//helpers

eq : expr " "? "==" " "? expr

unequal : expr " "? "!=" " "? expr

gt : expr " "? ">" " "? expr

lt : expr " "? "<" " "? expr

inverted : " "? "!" " "? expr

add : expr " "? "+" " "? expr

sub : expr " "? "-" " "? expr

mul : expr " "? "*" " "? expr

div : expr " "? "/" " "? expr

pow : expr " "? "**" " "? expr

remainder : expr " "? "%" " "? expr

helpers : eq | unequal | gt | lt | inverted | add | sub | mul | div | pow | remainder

//expressions

name : /([a-zA-Z_][a-zA-Z0-9_]*)+/

jnames : name (" " name)*

comma : "," " "?

scomma : "," " "?

name_unpack : "*" (name|attribute)

attribute : expr "." name

expr: assign | number | name | attribute | fcall | codeblock | pairs | function | fget | decorator | fscope | list | dict | tuple | "(" expr ")" | string | nstring | helpers

list : "[" (expr comma)* expr comma? "]"

tuple : "(" ((expr comma)* expr comma?)? ")"

innerdict : ((name " "? (":"|"=") " "? expr comma)* (expr " "? (":"|"=") " "? expr ","? " "?))?

dict: "[" innerdict "]"

pairitem : (expr " "? ":" " "?)* expr?

pairs : "{" (pairitem comma)* pairitem? "}"

argdata : "(" (expr comma)* (expr | innerdict)? ")"

opargdata : argdata?

fcall: "?" expr

fget : fgetbase | fgetcode

fgetbase : expr " "? argdata

fgetcode : (fgetbase | fgetcode comma? jnames?) " "? opargdata " "? (codeblock | pairs)

fname : "?" expr

fscope : ":" expr

decorator : "@" expr " "? expr

names_empty : "()"

function: ("(" names ")" | names_empty) " "? "=>" " "? stmt

names : "(" names ")" | ((name|attribute|"(" names ")") comma)* (name|attribute|"(" names ")"|name_unpack) scomma?

assign : names " "? "=" " "? expr

?number.1 :   SIGNED_INT -> int
            | SIGNED_FLOAT -> float

%import common (WS)
COMMENT: /#.*/
%ignore COMMENT
%ignore WS

nstring : name string
string: string_double | string_single
string_double: /"(?:[^"\\]|\\.)*"+/
string_single: /'(?:[^'\\]|\\.)*'+/

SIGNED_INT: /[-+]?(0|[1-9][0-9]*)/
SIGNED_FLOAT: /[-+]?(0|[1-9][0-9]*)\.[0-9]+/